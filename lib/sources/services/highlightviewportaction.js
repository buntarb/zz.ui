/**
 * @fileoverview Provide zz.ui.services.HighlightViewportAction class.
 * @license Apache-2.0
 * @author buntarb@gmail.com (Artem Lytvynov)
 * @author popkov.aleksander@gmail.com (Popkov Alexander)
 */

goog.provide( 'zz.ui.services.HighlightViewportAction' );
goog.require( 'goog.dom' );
goog.require( 'goog.dom.classlist' );
goog.require( 'goog.style' );
goog.require( 'goog.events' );
goog.require( 'goog.events.EventType' );
goog.require( 'goog.Timer' );
goog.require( 'zz.ui.enums.HighlightCss' );
goog.require( 'zz.ui.enums.HighlightConst' );
goog.require( 'zz.ui.services.ViewportAction' );

/**
 * Service for ripple effect.
 * @constructor
 */
zz.ui.services.HighlightViewportAction = function( ){

    /**
     * Determine is service in progress.
     * @type {boolean}
     * @private
     */
    this.highlightInProgress_ = false;

    /**
     * Viewport action service.
     * @type {zz.ui.services.ViewportAction}
     * @private
     */
    this.viewportActionSvc_ = zz.ui.services.ViewportAction.getInstance( );

	// Viewport action start event handling.
    goog.events.listen(

        this.viewportActionSvc_,
        zz.ui.enums.EventType.VIEWPORT_ACTION_START,
        this.viewportActionStartListener_,
        false,
        this );

	// Viewport action end event handling.
    goog.events.listen(

        this.viewportActionSvc_,
        zz.ui.enums.EventType.VIEWPORT_ACTION_END,
        this.viewportActionEndListener_,
        false,
        this )
};
goog.addSingletonGetter( zz.ui.services.HighlightViewportAction );

/**
 * Listener for animation start event.
 * @param {zz.ui.events.ViewportActionStart} evt
 * @private
 */
zz.ui.services.HighlightViewportAction.prototype.viewportActionStartListener_ = function( evt ){

    if( !this.highlightInProgress_ && this.isHighlighted_( evt.original.target ) ){

        this.highlightInProgress_ = true;
        this.patchHighlightedElement_( );
        this.restoreState_( );
        this.startHighlight_( evt );
    }
};

/**
 * Listener for animation end event.
 * @param {zz.ui.events.ViewportActionEnd} evt
 * @private
 */
zz.ui.services.HighlightViewportAction.prototype.viewportActionEndListener_ = function( evt ){

    if( this.highlightInProgress_ &&
        this.isHighlighted_( evt.original.target ) &&
        this.highlightElement_ === goog.dom.getElementByClass(

			zz.ui.enums.HighlightCss.HIGHLIGHT,
			evt.original.target ) ){

		// Don't fire for the artificial "mouseup" generated by a double-click.
		if( evt && evt.original.getBrowserEvent( ).detail !== 2 ){

			goog.dom.classlist.remove( this.highlightElement_, zz.ui.enums.HighlightCss.IS_VISIBLE );
		}
		goog.Timer.callOnce( this.endHighlight_, 0, this );
    }
};

/**
 * Determine is current action must be highlighted.
 * @param {Node} element
 * @returns {boolean}
 * @private
 */
zz.ui.services.HighlightViewportAction.prototype.isHighlighted_ = function( element ) {

	var result = false;
	do{

		result = goog.dom.classlist.contains(element, zz.ui.enums.HighlightCss.HIGHLIGHTED_ELEMENT);

		if( result ){

			/**
			 * Highlighted element.
			 * @type {Element}
			 * @private
			 */
			this.highlightedElement_ = element;

		}else{

			element = element.parentElement;
		}
	}while( element && !result );
	return result;
};

/**
 * Add necessary HTML elements to highlighted element.
 * @private
 */
zz.ui.services.HighlightViewportAction.prototype.patchHighlightedElement_ = function( ){

    if( !goog.dom.classlist.contains(

			this.highlightedElement_,
			zz.ui.enums.HighlightCss.HIGHLIGHTED_ELEMENT_PATCHED ) ){

        goog.dom.appendChild(

			this.highlightedElement_,
			goog.dom.createDom(

				goog.dom.TagName.SPAN, {

					'class': zz.ui.enums.HighlightCss.HIGHLIGHTED_ELEMENT_CONTAINER },

				goog.dom.createDom(

					goog.dom.TagName.SPAN, {

						'class': zz.ui.enums.HighlightCss.HIGHLIGHT } ) ) );

        goog.dom.classlist.add(

			this.highlightedElement_,
			zz.ui.enums.HighlightCss.HIGHLIGHTED_ELEMENT_PATCHED );
    }
};

/**
 * Restore service properties to start state.
 * @private
 */
zz.ui.services.HighlightViewportAction.prototype.restoreState_ = function( ){

	/**
	 * Ripple element.
	 * @type {Element}
	 * @private
	 */
	this.highlightElement_ = goog.dom.getElementByClass(

		zz.ui.enums.HighlightCss.HIGHLIGHT,
		this.highlightedElement_ );

    /**
     * Centering flag.
     * @type {boolean}
     * @private
     */
    this.centeringFlag_ = goog.dom.classlist.contains(

        this.highlightedElement_,
        zz.ui.enums.HighlightCss.HIGHLIGHT_CENTER );

    /**
     * Frame count.
     * @type {number}
     * @private
     */
    this.frameCount_ = 0;

    /**
     * Ripple size.
     * @type {number}
     * @private
     */
    this.highlightSize_ = 0;

    /**
     * X-coordinate.
     * @type {number}
     * @private
     */
    this.x_ = 0;

    /**
     * Y-coordinate.
     * @type {number}
     * @private
     */
    this.y_ = 0;
};

/**
 * Start highlight process.
 * @param {zz.ui.events.ViewportActionStart} evt
 * @private
 */
zz.ui.services.HighlightViewportAction.prototype.startHighlight_ = function( evt ){

	var x;
	var y;
	var bound = goog.style.getBounds( this.highlightedElement_ );
    if( !goog.style.getStyle( this.highlightElement_, 'width' ) &&
		!goog.style.getStyle( this.highlightElement_, 'height' ) ){

        this.boundHeight = bound.height;
        this.boundWidth = bound.width;
        this.highlightSize_ = Math.sqrt( bound.width * bound.width + bound.height * bound.height ) * 2 + 2;
        goog.style.setStyle( this.highlightElement_, {

            'width': this.highlightSize_ + 'px',
            'height': this.highlightSize_ + 'px'
        });
    }
    goog.dom.classlist.add( this.highlightElement_, zz.ui.enums.HighlightCss.IS_VISIBLE );
    if( this.frameCount_ > 0 ){

        return;
    }
	this.frameCount_ = 1;
    // Check if we are handling a keyboard click.
    if( evt.original.clientX === 0 && evt.original.clientY === 0 ){

        x = Math.round( bound.width / 2 );
        y = Math.round( bound.height / 2 );

    }else{

        var clientX = evt.clientX ?

			evt.clientX :
			evt.getBrowserEvent( ).touches[ 0 ].clientX;

        var clientY = evt.clientY ?

			evt.clientY :
			evt.getBrowserEvent( ).touches[ 0 ].clientY;

        x = Math.round( clientX - bound.left );
        y = Math.round( clientY - bound.top );
    }
	this.x_ = x;
	this.y_ = y;
    this.setHighlightStyles( true );
    window.requestAnimationFrame( goog.bind( this.animationFrameHandler, this ) );
};

/**
 * End highlight process. Allow a repaint to occur before removing this class,
 * so the animation shows for tap events, which seem to trigger a mouseup too
 * soon after mousedown.
 * @private
 */
zz.ui.services.HighlightViewportAction.prototype.endHighlight_ = function( ){

	goog.dom.classlist.remove(

		this.highlightElement_,
		zz.ui.enums.HighlightCss.IS_VISIBLE );

	this.highlightInProgress_ = false;
	this.highlightElement_ = null;
};

/**
 * Sets the ripple styles.
 * @param  {boolean} start whether or not this is the start frame.
 */
zz.ui.services.HighlightViewportAction.prototype.setHighlightStyles = function( start ){

    if( this.highlightElement_ !== null ){

        var transformString;
        var scale;
        var offset = 'translate(' + this.x_ + 'px, ' + this.y_ + 'px)';
        if( start ){

            scale = zz.ui.enums.HighlightConst.INITIAL_SCALE;

        }else{

            scale = zz.ui.enums.HighlightConst.FINAL_SCALE;
            if( this.centeringFlag_ ){

                offset = 'translate(' + this.boundWidth / 2 + 'px, ' + this.boundHeight / 2 + 'px) ';
            }
        }
        transformString = 'translate(-50%, -50%) ' + offset + scale;
        goog.style.setStyle( this.highlightElement_, {

            'webkitTransform': transformString,
            'msTransform': transformString,
            'transform': transformString
        } );
        if( start ){

            goog.dom.classlist.remove(

                /** @type {Element} */( this.highlightElement_ ),
                zz.ui.enums.HighlightCss.IS_ANIMATING );

        }else{

            this.highlightElement_.classList.add( zz.ui.enums.HighlightCss.IS_ANIMATING );
        }
    }
};

/**
 * Handles an animation frame.
 */
zz.ui.services.HighlightViewportAction.prototype.animationFrameHandler = function( ){

	if( this.frameCount_-- > 0 ){

		window.requestAnimationFrame( goog.bind( this.animationFrameHandler, this ) );

	}else{

		this.setHighlightStyles( false );
	}
};

